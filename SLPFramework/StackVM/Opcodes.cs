using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SLPCore.StackVM
{
    public enum Opcodes : byte
    {
        NOP     = 0x00,
        ADDI    = 0x01, //Берут два аргумента со стэка значений, помещают результат обратно
        ADDF    = 0x02,
        SUBI    = 0x03,
        SUBF    = 0x04,
        MULI    = 0x05,
        MULF    = 0x06,
        DIVI    = 0x07,
        DIVF    = 0x08,
        NEGI    = 0x09, //Берут один аргумент со стэка значений, помещают результат обратно
        NEGF    = 0x0A,

        PUSH1   = 0x10, //Берёт 1 байт после оп-кода и помещают на стэк значений
        PUSH8   = 0x11, //Берёт 8 байт после оп-кода и помещают на стэк значений
        POPL    = 0x12, //Берёт 2 байта как беззнаковое число номера локальной переменной после оп-кода, снимает значение со стэка, помещает его в локальную переменную
        PUSHL   = 0x13, //Берёт 2 байта как беззнаковое число номера локальной переменной после оп-кода, берёт значение из локальной переменной и помещает его на стэк
        //Берёт значение со стэка и печатают
        WRTI    = 0x30, //значение как i64
        WRTF    = 0x31, //значение как f64
        WRTS    = 0x32, //строку с соответствующим номером из списка константных строк
        //Снимают со стэка два значения типа i64 A и B и возвращают true, если
        EQI     = 0x40, // числа равны
        LEQI    = 0x41, // A меньше или равно B
        LI      = 0x42, // A меньше B

        //Снимают со стэка два значения типа f64 A и B и возвращают true, если
        EQF     = 0x50, // числа равны
        LEQF    = 0x51, // A меньше или равно B
        LF      = 0x52, // A меньше B

        //Снимают со стэка два значения типа bool A и B и возвращают true, если
        ANDB    = 0x60,  
        ORB     = 0x61,
        NEGB    = 0x62, //Снимает одно значение со стэка, помещает результат обратно

        //Преобразует значение на вершине стэка 
        FTOI    = 0x70, //из f64 в i64
        ITOF    = 0x71, //из i64 в f64

        SWAP    = 0x80, //Берёт два значения со стэка и возвращает их на стэк в обратном порядке
        DUP2    = 0x81, //Дублирует последнее значение на стэке
        DROP    = 0x82, //Снимает значение со стэка

        JMP2    = 0x90, //Берёт 2 байта после опкода как знаковое i16 и смещает PC на это значение
        JMPT2   = 0x91, //Берёт 2 байта после опкода, берёт значение со стэка как bool, и смещает PC на это значение, если значение со стэка true
        JMPF2   = 0x92, //Берёт 2 байта после опкода, берёт значение со стэка как bool, и смещает PC на это значение, если значение со стэка false


        STOP    = 0xF0, //Останавливает виртуальную машину
        MILLS   = 0xF1, //Кладёт на стэк время в f64 с момента запуска программы 
    }
}
