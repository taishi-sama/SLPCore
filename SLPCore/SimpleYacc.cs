// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-TAISHI
// DateTime: 02.12.2022 18:04:22
// UserName: taishi_sama
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SLPCore.AST;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,WHILE=8,DO=9,REPEAT=10,UNTIL=11,FOR=12,
    TO=13,WRITE=14,LBRACKET=15,RBRACKET=16,IF=17,THEN=18,
    ELSE=19,PERIOD=20,VAR=21,PLUS=22,MINUS=23,STAR=24,
    SLASH=25,EQUALEQUAL=26,BANGEQUAL=27,GREATEREQUAL=28,LESSEREQUAL=29,GREATER=30,
    LESSER=31,BANG=32,AS=33,COLON=34,OR=35,AND=36,
    TRUE=37,FALSE=38,MILLITIME=39,ID=40,INUM=41,RNUM=42,
    CONSTSTR=43};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public DecNode dlVal;
			public TypeNode tVal;
			public List<IdNode> idsList;
			public List<ExprNode> exprList; 
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[64];
  private static State[] states = new State[116];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "equality", "comparation", "term", "factor", "unary", 
      "primary", "logic_or", "logic_and", "cast_as", "assign", "statement", "cycle", 
      "while", "repeat", "for", "write", "condition", "stlist", "block", "declare", 
      "typeInd", "idlist", "exprlist", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-26,1,-21,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-20,5,-13,114,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[5] = new State(new int[]{4,6,40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,7,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[6] = new State(-5);
    states[7] = new State(new int[]{7,8});
    states[8] = new State(-4);
    states[9] = new State(-6);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,12,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[12] = new State(-24);
    states[13] = new State(new int[]{33,14,7,-25,19,-25,16,-25,40,-25,3,-25,5,-25,8,-25,10,-25,12,-25,14,-25,17,-25,21,-25,9,-25,13,-25,18,-25,20,-25});
    states[14] = new State(new int[]{40,16},new int[]{-23,15});
    states[15] = new State(-27);
    states[16] = new State(-16);
    states[17] = new State(new int[]{35,18,33,-26,7,-26,19,-26,16,-26,40,-26,3,-26,5,-26,8,-26,10,-26,12,-26,14,-26,17,-26,21,-26,9,-26,13,-26,18,-26,20,-26});
    states[18] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-10,19,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[19] = new State(new int[]{36,20,35,-29,33,-29,7,-29,19,-29,16,-29,40,-29,3,-29,5,-29,8,-29,10,-29,12,-29,14,-29,17,-29,21,-29,9,-29,13,-29,18,-29,20,-29});
    states[20] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-3,21,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[21] = new State(new int[]{27,22,26,44,36,-31,35,-31,33,-31,7,-31,19,-31,16,-31,40,-31,3,-31,5,-31,8,-31,10,-31,12,-31,14,-31,17,-31,21,-31,9,-31,13,-31,18,-31,20,-31});
    states[22] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-4,23,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[23] = new State(new int[]{31,24,30,46,29,58,28,60,27,-33,26,-33,36,-33,35,-33,33,-33,7,-33,19,-33,16,-33,40,-33,3,-33,5,-33,8,-33,10,-33,12,-33,14,-33,17,-33,21,-33,9,-33,13,-33,18,-33,20,-33});
    states[24] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-5,25,-6,57,-7,56,-8,30,-2,37});
    states[25] = new State(new int[]{22,26,23,48,31,-36,30,-36,29,-36,28,-36,27,-36,26,-36,36,-36,35,-36,33,-36,7,-36,19,-36,16,-36,40,-36,3,-36,5,-36,8,-36,10,-36,12,-36,14,-36,17,-36,21,-36,9,-36,13,-36,18,-36,20,-36});
    states[26] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-6,27,-7,56,-8,30,-2,37});
    states[27] = new State(new int[]{24,28,25,50,22,-41,23,-41,31,-41,30,-41,29,-41,28,-41,27,-41,26,-41,36,-41,35,-41,33,-41,7,-41,19,-41,16,-41,40,-41,3,-41,5,-41,8,-41,10,-41,12,-41,14,-41,17,-41,21,-41,9,-41,13,-41,18,-41,20,-41});
    states[28] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-7,29,-8,30,-2,37});
    states[29] = new State(-44);
    states[30] = new State(-46);
    states[31] = new State(-49);
    states[32] = new State(-50);
    states[33] = new State(-51);
    states[34] = new State(-52);
    states[35] = new State(-53);
    states[36] = new State(-54);
    states[37] = new State(-55);
    states[38] = new State(-15);
    states[39] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,40,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[40] = new State(new int[]{16,41});
    states[41] = new State(-56);
    states[42] = new State(new int[]{36,20,35,-28,33,-28,7,-28,19,-28,16,-28,40,-28,3,-28,5,-28,8,-28,10,-28,12,-28,14,-28,17,-28,21,-28,9,-28,13,-28,18,-28,20,-28});
    states[43] = new State(new int[]{27,22,26,44,36,-30,35,-30,33,-30,7,-30,19,-30,16,-30,40,-30,3,-30,5,-30,8,-30,10,-30,12,-30,14,-30,17,-30,21,-30,9,-30,13,-30,18,-30,20,-30});
    states[44] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-4,45,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[45] = new State(new int[]{31,24,30,46,29,58,28,60,27,-34,26,-34,36,-34,35,-34,33,-34,7,-34,19,-34,16,-34,40,-34,3,-34,5,-34,8,-34,10,-34,12,-34,14,-34,17,-34,21,-34,9,-34,13,-34,18,-34,20,-34});
    states[46] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-5,47,-6,57,-7,56,-8,30,-2,37});
    states[47] = new State(new int[]{22,26,23,48,31,-37,30,-37,29,-37,28,-37,27,-37,26,-37,36,-37,35,-37,33,-37,7,-37,19,-37,16,-37,40,-37,3,-37,5,-37,8,-37,10,-37,12,-37,14,-37,17,-37,21,-37,9,-37,13,-37,18,-37,20,-37});
    states[48] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-6,49,-7,56,-8,30,-2,37});
    states[49] = new State(new int[]{24,28,25,50,22,-42,23,-42,31,-42,30,-42,29,-42,28,-42,27,-42,26,-42,36,-42,35,-42,33,-42,7,-42,19,-42,16,-42,40,-42,3,-42,5,-42,8,-42,10,-42,12,-42,14,-42,17,-42,21,-42,9,-42,13,-42,18,-42,20,-42});
    states[50] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-7,51,-8,30,-2,37});
    states[51] = new State(-45);
    states[52] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-7,53,-8,30,-2,37});
    states[53] = new State(-47);
    states[54] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-7,55,-8,30,-2,37});
    states[55] = new State(-48);
    states[56] = new State(-43);
    states[57] = new State(new int[]{24,28,25,50,22,-40,23,-40,31,-40,30,-40,29,-40,28,-40,27,-40,26,-40,36,-40,35,-40,33,-40,7,-40,19,-40,16,-40,40,-40,3,-40,5,-40,8,-40,10,-40,12,-40,14,-40,17,-40,21,-40,9,-40,13,-40,18,-40,20,-40});
    states[58] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-5,59,-6,57,-7,56,-8,30,-2,37});
    states[59] = new State(new int[]{22,26,23,48,31,-38,30,-38,29,-38,28,-38,27,-38,26,-38,36,-38,35,-38,33,-38,7,-38,19,-38,16,-38,40,-38,3,-38,5,-38,8,-38,10,-38,12,-38,14,-38,17,-38,21,-38,9,-38,13,-38,18,-38,20,-38});
    states[60] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-5,61,-6,57,-7,56,-8,30,-2,37});
    states[61] = new State(new int[]{22,26,23,48,31,-39,30,-39,29,-39,28,-39,27,-39,26,-39,36,-39,35,-39,33,-39,7,-39,19,-39,16,-39,40,-39,3,-39,5,-39,8,-39,10,-39,12,-39,14,-39,17,-39,21,-39,9,-39,13,-39,18,-39,20,-39});
    states[62] = new State(new int[]{22,26,23,48,31,-35,30,-35,29,-35,28,-35,27,-35,26,-35,36,-35,35,-35,33,-35,7,-35,19,-35,16,-35,40,-35,3,-35,5,-35,8,-35,10,-35,12,-35,14,-35,17,-35,21,-35,9,-35,13,-35,18,-35,20,-35});
    states[63] = new State(new int[]{31,24,30,46,29,58,28,60,27,-32,26,-32,36,-32,35,-32,33,-32,7,-32,19,-32,16,-32,40,-32,3,-32,5,-32,8,-32,10,-32,12,-32,14,-32,17,-32,21,-32,9,-32,13,-32,18,-32,20,-32});
    states[64] = new State(-7);
    states[65] = new State(-8);
    states[66] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,67,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[67] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,68,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[68] = new State(-57);
    states[69] = new State(-9);
    states[70] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,71,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[71] = new State(new int[]{9,72});
    states[72] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,73,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[73] = new State(-58);
    states[74] = new State(-10);
    states[75] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-20,76,-13,114,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[76] = new State(new int[]{11,77,40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,7,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[77] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,78,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[78] = new State(-59);
    states[79] = new State(-11);
    states[80] = new State(new int[]{21,81});
    states[81] = new State(new int[]{40,38},new int[]{-2,82});
    states[82] = new State(new int[]{6,83});
    states[83] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,84,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[84] = new State(new int[]{13,85});
    states[85] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,86,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[86] = new State(new int[]{9,87});
    states[87] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,88,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[88] = new State(-60);
    states[89] = new State(-12);
    states[90] = new State(new int[]{15,91});
    states[91] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,92,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[92] = new State(new int[]{16,93});
    states[93] = new State(-61);
    states[94] = new State(-13);
    states[95] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,96,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[96] = new State(new int[]{18,97});
    states[97] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,98,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[98] = new State(new int[]{19,99,7,-63});
    states[99] = new State(new int[]{40,38,3,4,5,66,8,70,10,75,12,80,14,90,17,95,21,102},new int[]{-13,100,-12,9,-2,10,-21,64,-14,65,-15,69,-16,74,-17,79,-18,89,-19,94,-22,101});
    states[100] = new State(-62);
    states[101] = new State(-14);
    states[102] = new State(new int[]{40,38},new int[]{-24,103,-2,113});
    states[103] = new State(new int[]{34,104,6,106,20,111,7,-21,19,-21});
    states[104] = new State(new int[]{40,16},new int[]{-23,105});
    states[105] = new State(-22);
    states[106] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-25,107,-1,110,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[107] = new State(new int[]{20,108,7,-23,19,-23});
    states[108] = new State(new int[]{41,31,42,32,43,33,37,34,38,35,39,36,40,38,15,39,32,52,23,54},new int[]{-1,109,-11,13,-9,17,-10,42,-3,43,-4,63,-5,62,-6,57,-7,56,-8,30,-2,37});
    states[109] = new State(-20);
    states[110] = new State(-19);
    states[111] = new State(new int[]{40,38},new int[]{-2,112});
    states[112] = new State(-18);
    states[113] = new State(-17);
    states[114] = new State(new int[]{7,115});
    states[115] = new State(-3);

    rules[1] = new Rule(-27, new int[]{-26,2});
    rules[2] = new Rule(-26, new int[]{-21});
    rules[3] = new Rule(-20, new int[]{-13,7});
    rules[4] = new Rule(-20, new int[]{-20,-13,7});
    rules[5] = new Rule(-21, new int[]{3,-20,4});
    rules[6] = new Rule(-13, new int[]{-12});
    rules[7] = new Rule(-13, new int[]{-21});
    rules[8] = new Rule(-13, new int[]{-14});
    rules[9] = new Rule(-13, new int[]{-15});
    rules[10] = new Rule(-13, new int[]{-16});
    rules[11] = new Rule(-13, new int[]{-17});
    rules[12] = new Rule(-13, new int[]{-18});
    rules[13] = new Rule(-13, new int[]{-19});
    rules[14] = new Rule(-13, new int[]{-22});
    rules[15] = new Rule(-2, new int[]{40});
    rules[16] = new Rule(-23, new int[]{40});
    rules[17] = new Rule(-24, new int[]{-2});
    rules[18] = new Rule(-24, new int[]{-24,20,-2});
    rules[19] = new Rule(-25, new int[]{-1});
    rules[20] = new Rule(-25, new int[]{-25,20,-1});
    rules[21] = new Rule(-22, new int[]{21,-24});
    rules[22] = new Rule(-22, new int[]{21,-24,34,-23});
    rules[23] = new Rule(-22, new int[]{21,-24,6,-25});
    rules[24] = new Rule(-12, new int[]{-2,6,-1});
    rules[25] = new Rule(-1, new int[]{-11});
    rules[26] = new Rule(-11, new int[]{-9});
    rules[27] = new Rule(-11, new int[]{-11,33,-23});
    rules[28] = new Rule(-9, new int[]{-10});
    rules[29] = new Rule(-9, new int[]{-9,35,-10});
    rules[30] = new Rule(-10, new int[]{-3});
    rules[31] = new Rule(-10, new int[]{-10,36,-3});
    rules[32] = new Rule(-3, new int[]{-4});
    rules[33] = new Rule(-3, new int[]{-3,27,-4});
    rules[34] = new Rule(-3, new int[]{-3,26,-4});
    rules[35] = new Rule(-4, new int[]{-5});
    rules[36] = new Rule(-4, new int[]{-4,31,-5});
    rules[37] = new Rule(-4, new int[]{-4,30,-5});
    rules[38] = new Rule(-4, new int[]{-4,29,-5});
    rules[39] = new Rule(-4, new int[]{-4,28,-5});
    rules[40] = new Rule(-5, new int[]{-6});
    rules[41] = new Rule(-5, new int[]{-5,22,-6});
    rules[42] = new Rule(-5, new int[]{-5,23,-6});
    rules[43] = new Rule(-6, new int[]{-7});
    rules[44] = new Rule(-6, new int[]{-6,24,-7});
    rules[45] = new Rule(-6, new int[]{-6,25,-7});
    rules[46] = new Rule(-7, new int[]{-8});
    rules[47] = new Rule(-7, new int[]{32,-7});
    rules[48] = new Rule(-7, new int[]{23,-7});
    rules[49] = new Rule(-8, new int[]{41});
    rules[50] = new Rule(-8, new int[]{42});
    rules[51] = new Rule(-8, new int[]{43});
    rules[52] = new Rule(-8, new int[]{37});
    rules[53] = new Rule(-8, new int[]{38});
    rules[54] = new Rule(-8, new int[]{39});
    rules[55] = new Rule(-8, new int[]{-2});
    rules[56] = new Rule(-8, new int[]{15,-1,16});
    rules[57] = new Rule(-14, new int[]{5,-1,-13});
    rules[58] = new Rule(-15, new int[]{8,-1,9,-13});
    rules[59] = new Rule(-16, new int[]{10,-20,11,-1});
    rules[60] = new Rule(-17, new int[]{12,21,-2,6,-1,13,-1,9,-13});
    rules[61] = new Rule(-18, new int[]{14,15,-1,16});
    rules[62] = new Rule(-19, new int[]{17,-1,18,-13,19,-13});
    rules[63] = new Rule(-19, new int[]{17,-1,18,-13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement, SEMICOLON
{ 
			CurrentSemanticValue.blVal = new BlockNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].stVal); 
		}
        break;
      case 4: // stlist -> stlist, statement, SEMICOLON
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-2].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 6: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 7: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 8: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // statement -> for
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // statement -> write
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 13: // statement -> condition
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 14: // statement -> declare
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].dlVal; }
        break;
      case 15: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 16: // typeInd -> ID
{ CurrentSemanticValue.tVal = new TypeNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 17: // idlist -> ident
{ CurrentSemanticValue.idsList = new List<IdNode>();
					CurrentSemanticValue.idsList.Add(ValueStack[ValueStack.Depth-1].eVal as IdNode); }
        break;
      case 18: // idlist -> idlist, PERIOD, ident
{ 
			ValueStack[ValueStack.Depth-3].idsList.Add(ValueStack[ValueStack.Depth-1].eVal as IdNode);
			CurrentSemanticValue.idsList = ValueStack[ValueStack.Depth-3].idsList;
		}
        break;
      case 19: // exprlist -> expr
{CurrentSemanticValue.exprList = new List<ExprNode>();
					CurrentSemanticValue.exprList.Add(ValueStack[ValueStack.Depth-1].eVal);}
        break;
      case 20: // exprlist -> exprlist, PERIOD, expr
{
			ValueStack[ValueStack.Depth-3].exprList.Add(ValueStack[ValueStack.Depth-1].eVal);
			CurrentSemanticValue.exprList = ValueStack[ValueStack.Depth-3].exprList;
		 }
        break;
      case 21: // declare -> VAR, idlist
{ CurrentSemanticValue.dlVal = new DecNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].idsList); }
        break;
      case 22: // declare -> VAR, idlist, COLON, typeInd
{ CurrentSemanticValue.dlVal = new DecNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].idsList, ValueStack[ValueStack.Depth-1].tVal); }
        break;
      case 23: // declare -> VAR, idlist, ASSIGN, exprlist
{ CurrentSemanticValue.dlVal = new DecNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].idsList, ValueStack[ValueStack.Depth-1].exprList); }
        break;
      case 24: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 25: // expr -> cast_as
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 26: // cast_as -> logic_or
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 27: // cast_as -> cast_as, AS, typeInd
{CurrentSemanticValue.eVal = new CastNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].tVal);}
        break;
      case 28: // logic_or -> logic_and
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 29: // logic_or -> logic_or, OR, logic_and
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.LogicOr);}
        break;
      case 30: // logic_and -> equality
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 31: // logic_and -> logic_and, AND, equality
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.LogicAnd);}
        break;
      case 32: // equality -> comparation
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 33: // equality -> equality, BANGEQUAL, comparation
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompUnequal);}
        break;
      case 34: // equality -> equality, EQUALEQUAL, comparation
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompEqual);}
        break;
      case 35: // comparation -> term
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 36: // comparation -> comparation, LESSER, term
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompLesser);}
        break;
      case 37: // comparation -> comparation, GREATER, term
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompGreater);}
        break;
      case 38: // comparation -> comparation, LESSEREQUAL, term
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompLesserEqual);}
        break;
      case 39: // comparation -> comparation, GREATEREQUAL, term
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.CompGreaterEqual);}
        break;
      case 40: // term -> factor
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 41: // term -> term, PLUS, factor
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.Add);}
        break;
      case 42: // term -> term, MINUS, factor
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.Subtract);}
        break;
      case 43: // factor -> unary
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 44: // factor -> factor, STAR, unary
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.Multiply);}
        break;
      case 45: // factor -> factor, SLASH, unary
{CurrentSemanticValue.eVal = new BinaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinaryOperations.Divide);}
        break;
      case 46: // unary -> primary
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal;}
        break;
      case 47: // unary -> BANG, unary
{CurrentSemanticValue.eVal = new UnaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].eVal, UnaryOperations.LogicalNot);}
        break;
      case 48: // unary -> MINUS, unary
{CurrentSemanticValue.eVal = new UnaryOpNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].eVal, UnaryOperations.Negate);}
        break;
      case 49: // primary -> INUM
{ CurrentSemanticValue.eVal = new ConstantNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].sVal, new TypeNode(CurrentLocationSpan,"i64")); }
        break;
      case 50: // primary -> RNUM
{ CurrentSemanticValue.eVal = new ConstantNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].sVal, new TypeNode(CurrentLocationSpan,"f64")); }
        break;
      case 51: // primary -> CONSTSTR
{ CurrentSemanticValue.eVal = new ConstantNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].sVal, new TypeNode(CurrentLocationSpan,"conststr")); }
        break;
      case 52: // primary -> TRUE
{ CurrentSemanticValue.eVal = new ConstantNode(CurrentLocationSpan, "true", new TypeNode(CurrentLocationSpan, "bool")); }
        break;
      case 53: // primary -> FALSE
{ CurrentSemanticValue.eVal = new ConstantNode(CurrentLocationSpan, "false", new TypeNode(CurrentLocationSpan, "bool")); }
        break;
      case 54: // primary -> MILLITIME
{ CurrentSemanticValue.eVal = new MilliTimeNode(CurrentLocationSpan); }
        break;
      case 55: // primary -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 56: // primary -> LBRACKET, expr, RBRACKET
{CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal;}
        break;
      case 57: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 58: // while -> WHILE, expr, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 59: // repeat -> REPEAT, stlist, UNTIL, expr
{ CurrentSemanticValue.stVal = new RepeatNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].blVal, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 60: // for -> FOR, VAR, ident, ASSIGN, expr, TO, expr, DO, statement
{ CurrentSemanticValue.stVal = new ForNode (CurrentLocationSpan, ValueStack[ValueStack.Depth-7].eVal as IdNode, ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal);}
        break;
      case 61: // write -> WRITE, LBRACKET, expr, RBRACKET
{ CurrentSemanticValue.stVal = new WriteNode (CurrentLocationSpan, ValueStack[ValueStack.Depth-2].eVal);}
        break;
      case 62: // condition -> IF, expr, THEN, statement, ELSE, statement
{CurrentSemanticValue.stVal = new IfNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal);}
        break;
      case 63: // condition -> IF, expr, THEN, statement
{CurrentSemanticValue.stVal = new IfNode(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal);}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
